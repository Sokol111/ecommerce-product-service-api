// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new product
	// (POST /product/create)
	CreateProduct(c *gin.Context)
	// Get a product by ID
	// (GET /product/get/{id})
	GetProductById(c *gin.Context, id string)
	// Get a list of all products
	// (GET /product/list)
	GetAll(c *gin.Context)
	// Update an existing product
	// (PUT /product/update)
	UpdateProduct(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProduct(c)
}

// GetProductById operation middleware
func (siw *ServerInterfaceWrapper) GetProductById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductById(c, id)
}

// GetAll operation middleware
func (siw *ServerInterfaceWrapper) GetAll(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAll(c)
}

// UpdateProduct operation middleware
func (siw *ServerInterfaceWrapper) UpdateProduct(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProduct(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/product/create", wrapper.CreateProduct)
	router.GET(options.BaseURL+"/product/get/:id", wrapper.GetProductById)
	router.GET(options.BaseURL+"/product/list", wrapper.GetAll)
	router.PUT(options.BaseURL+"/product/update", wrapper.UpdateProduct)
}

type CreateProductRequestObject struct {
	Body *CreateProductJSONRequestBody
}

type CreateProductResponseObject interface {
	VisitCreateProductResponse(w http.ResponseWriter) error
}

type CreateProduct200JSONResponse ProductResponse

func (response CreateProduct200JSONResponse) VisitCreateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProduct400ApplicationProblemPlusJSONResponse Problem

func (response CreateProduct400ApplicationProblemPlusJSONResponse) VisitCreateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProduct500ApplicationProblemPlusJSONResponse Problem

func (response CreateProduct500ApplicationProblemPlusJSONResponse) VisitCreateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProductByIdRequestObject struct {
	Id string `json:"id"`
}

type GetProductByIdResponseObject interface {
	VisitGetProductByIdResponse(w http.ResponseWriter) error
}

type GetProductById200JSONResponse ProductResponse

func (response GetProductById200JSONResponse) VisitGetProductByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductById404ApplicationProblemPlusJSONResponse Problem

func (response GetProductById404ApplicationProblemPlusJSONResponse) VisitGetProductByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProductById500ApplicationProblemPlusJSONResponse Problem

func (response GetProductById500ApplicationProblemPlusJSONResponse) VisitGetProductByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllRequestObject struct {
}

type GetAllResponseObject interface {
	VisitGetAllResponse(w http.ResponseWriter) error
}

type GetAll200JSONResponse []ProductResponse

func (response GetAll200JSONResponse) VisitGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAll500ApplicationProblemPlusJSONResponse Problem

func (response GetAll500ApplicationProblemPlusJSONResponse) VisitGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProductRequestObject struct {
	Body *UpdateProductJSONRequestBody
}

type UpdateProductResponseObject interface {
	VisitUpdateProductResponse(w http.ResponseWriter) error
}

type UpdateProduct200JSONResponse ProductResponse

func (response UpdateProduct200JSONResponse) VisitUpdateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProduct400ApplicationProblemPlusJSONResponse Problem

func (response UpdateProduct400ApplicationProblemPlusJSONResponse) VisitUpdateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProduct412ApplicationProblemPlusJSONResponse Problem

func (response UpdateProduct412ApplicationProblemPlusJSONResponse) VisitUpdateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProduct500ApplicationProblemPlusJSONResponse Problem

func (response UpdateProduct500ApplicationProblemPlusJSONResponse) VisitUpdateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new product
	// (POST /product/create)
	CreateProduct(ctx context.Context, request CreateProductRequestObject) (CreateProductResponseObject, error)
	// Get a product by ID
	// (GET /product/get/{id})
	GetProductById(ctx context.Context, request GetProductByIdRequestObject) (GetProductByIdResponseObject, error)
	// Get a list of all products
	// (GET /product/list)
	GetAll(ctx context.Context, request GetAllRequestObject) (GetAllResponseObject, error)
	// Update an existing product
	// (PUT /product/update)
	UpdateProduct(ctx context.Context, request UpdateProductRequestObject) (UpdateProductResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateProduct operation middleware
func (sh *strictHandler) CreateProduct(ctx *gin.Context) {
	var request CreateProductRequestObject

	var body CreateProductJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProduct(ctx, request.(CreateProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateProductResponseObject); ok {
		if err := validResponse.VisitCreateProductResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProductById operation middleware
func (sh *strictHandler) GetProductById(ctx *gin.Context, id string) {
	var request GetProductByIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductById(ctx, request.(GetProductByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProductByIdResponseObject); ok {
		if err := validResponse.VisitGetProductByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAll operation middleware
func (sh *strictHandler) GetAll(ctx *gin.Context) {
	var request GetAllRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAll(ctx, request.(GetAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAll")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllResponseObject); ok {
		if err := validResponse.VisitGetAllResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProduct operation middleware
func (sh *strictHandler) UpdateProduct(ctx *gin.Context) {
	var request UpdateProductRequestObject

	var body UpdateProductJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProduct(ctx, request.(UpdateProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateProductResponseObject); ok {
		if err := validResponse.VisitUpdateProductResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
